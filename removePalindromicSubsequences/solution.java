/**
 * Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
 * Return the minimum number of steps to make the given string empty.
 * A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.
 * A string is called palindrome if is one that reads the same backward as well as forward.
 * 
 * Input: s = "ababa"
 * Output: 1
 * Explanation: String is already palindrome
 */
class Solution {
    public int removePalindromeSub(String s) {
        
        /*
        Approach : There are mainly three conditions
        1st : if the string is empty, return 0
        2nd : if the string is already a palindrome, return 1. This can be checked using Stringbuilder where if the reverse of the stringBuilder object converted to a string is equal to our string s
        
        3rd : If not the above two cases, the only option is to either first remove all the "a" (or the "b") in first operation and then we would be left with all "b" (or all "a") which can be removed in another operation thus making the total to 2
        */
        
        if(s.isEmpty())
            return 0;
        else
        {
            StringBuilder sb = new StringBuilder(s);
            if(s.equals(sb.reverse().toString()))
                return 1;
            else
                return 2;
        }
    }
}