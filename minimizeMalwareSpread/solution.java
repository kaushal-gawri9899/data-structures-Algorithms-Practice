/**
 * You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.
 * Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.
 * Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial.
 * Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.
 * Note that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.
 *
 * Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
 * Output: 0 
 */
class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
        /*
        We can use union find with the approach to 
        - we apply union find so that we can get number of all networks(the components in our graph) with their size
        - We create two arrays, first containing the infected nodes count and other the size of the component
        - Using the find function we store the number of infected nodes that we have in a given component
        - The last step would be to iterate over the initial array again such that the components with exactly 1 infected nodes are prioritized first and network with larger nodes is then prioritized
        */
        
        //Parent will contain the group of nodes reachable through each other
        int[] parent = new int[graph.length];
        int len = graph.length;
        
        for(int i=0; i<len; i++)
            parent[i] = i;
        
        for(int i=0; i<len; i++)
        {
            for(int j=0; j<graph[0].length; j++)
            {
                //We skip when i==j as parent already has the value initialized for that case
                if(i!=j && graph[i][j]==1)
                    union(parent,i,j);
            }
        }
        
        
        //infectedSize will be the size of group of nodes
        int[] infectedSize = new int[len];
        //malwareCount will store the number of infected node for each group
        int[] malwareCount = new int[len];
        
        Arrays.sort(initial);
        int min = initial[0];
        
        for(int in : initial)
        {
            infectedSize[find(in,parent)]++;
        }
        
        for(int i=0; i<len; i++)
        {
            malwareCount[find(i,parent)]++;
        }
        
       
        
        int maxRemoved = 0;
        
        for(int in : initial)
        {
            if(infectedSize[parent[in]]==1 && malwareCount[parent[in]] > maxRemoved)
            {
                maxRemoved = malwareCount[parent[in]];
                min = in;
            }
        }
        
        
        return min;
        
    }
    
    public int find(int key, int[] parent)
    {
        if(parent[key]==key)
            return key;
        
        return parent[key] = find(parent[key],parent);
    }

    public void union(int[] parent, int a, int b)
    {
        int r = find(a,parent);
        int c = find(b,parent);
        
        //We don't care about the cycles
        parent[r] = c;
    }
}

/*DFS APPROACH*/
// class Solution 
// {
//     public int minMalwareSpread(int[][] graph, int[] initial) {
    
//         /*We first need to find the first node in initial array (sorted) that is the only malware node in union and union has max number of nodes*/
        
//         Arrays.sort(initial);
        
//         Set<Integer> malPresent = new HashSet<>();
        
//         for(int i : initial)
//             malPresent.add(i);
        
//         int sol =initial[0];
//         int maxVal = 0;
        
//        for(int i : initial)
//        {
//            //Array responsible to keep track of flag stating presence of other malware in union (component)
//            boolean[] flag = new boolean[1]; 
           
//            Set<Integer> visited = new HashSet<>();
           
//            //Count number of nodes in current component
//            int maxCount = dfs(i,i,graph,malPresent,visited,flag);
//            //If current component has multiple malwares, that is removing the current malware won't help in saving the component as it will be affected by other
//            if(flag[0])
//            {
//                continue;
//            }
//            if(maxCount>maxVal)
//            {
//                maxVal = maxCount;
//                sol = i;
//            }
//        }
        
//         return sol;
    
//     }
    
//     private int dfs(int begin, int initialBegin, int[][] graph, Set<Integer> malPresent, Set<Integer> visited, boolean[] flag)
//     {
//         if(visited.contains(begin) || flag[0])
//             return 0;
        
//         int sol = 1;
//         //Mark the current position
//         visited.add(begin);
        
//         for(int j=0; j<graph[begin].length; j++)
//         {
//             if(graph[begin][j]==1)
//             {
//                 //If we find another malware that is different from initialBegin position, we set flag true and there is no need to search more
//                 if(initialBegin != j && malPresent.contains(j))
//                 {
//                     flag[0] = true;
//                     break;
//                 }
//                 sol+= dfs(j,initialBegin, graph, malPresent, visited, flag);
//             }
//         }
        
//         return sol;
//     }
    
// }